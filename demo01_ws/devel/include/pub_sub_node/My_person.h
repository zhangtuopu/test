// Generated by gencpp from file pub_sub_node/My_person.msg
// DO NOT EDIT!


#ifndef PUB_SUB_NODE_MESSAGE_MY_PERSON_H
#define PUB_SUB_NODE_MESSAGE_MY_PERSON_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pub_sub_node
{
template <class ContainerAllocator>
struct My_person_
{
  typedef My_person_<ContainerAllocator> Type;

  My_person_()
    : age(0)
    , h(0.0)  {
    }
  My_person_(const ContainerAllocator& _alloc)
    : age(0)
    , h(0.0)  {
  (void)_alloc;
    }



   typedef uint16_t _age_type;
  _age_type age;

   typedef float _h_type;
  _h_type h;





  typedef boost::shared_ptr< ::pub_sub_node::My_person_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pub_sub_node::My_person_<ContainerAllocator> const> ConstPtr;

}; // struct My_person_

typedef ::pub_sub_node::My_person_<std::allocator<void> > My_person;

typedef boost::shared_ptr< ::pub_sub_node::My_person > My_personPtr;
typedef boost::shared_ptr< ::pub_sub_node::My_person const> My_personConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pub_sub_node::My_person_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pub_sub_node::My_person_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pub_sub_node::My_person_<ContainerAllocator1> & lhs, const ::pub_sub_node::My_person_<ContainerAllocator2> & rhs)
{
  return lhs.age == rhs.age &&
    lhs.h == rhs.h;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pub_sub_node::My_person_<ContainerAllocator1> & lhs, const ::pub_sub_node::My_person_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pub_sub_node

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::pub_sub_node::My_person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pub_sub_node::My_person_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pub_sub_node::My_person_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pub_sub_node::My_person_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pub_sub_node::My_person_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pub_sub_node::My_person_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pub_sub_node::My_person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d159fe65d5f13b800fcb3f83f1fb93a6";
  }

  static const char* value(const ::pub_sub_node::My_person_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd159fe65d5f13b80ULL;
  static const uint64_t static_value2 = 0x0fcb3f83f1fb93a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::pub_sub_node::My_person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pub_sub_node/My_person";
  }

  static const char* value(const ::pub_sub_node::My_person_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pub_sub_node::My_person_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 age\n"
"float32 h\n"
;
  }

  static const char* value(const ::pub_sub_node::My_person_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pub_sub_node::My_person_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.age);
      stream.next(m.h);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct My_person_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pub_sub_node::My_person_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pub_sub_node::My_person_<ContainerAllocator>& v)
  {
    s << indent << "age: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.age);
    s << indent << "h: ";
    Printer<float>::stream(s, indent + "  ", v.h);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PUB_SUB_NODE_MESSAGE_MY_PERSON_H
